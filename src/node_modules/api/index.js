import axios from 'axios';
import { find, propEq, includes, filter, toLower, prop } from 'ramda';

import apps from './mockApps';
import cats from './mockCategories';

const rndError = () => (Math.random() > 0.3);

/* ------ FETCH ALL APPS ------ */

export const fetchApps = async () => {
  console.log('start');
  
  /* ---- MOCK DATA ----*/

  return new Promise((resolve, reject) => {

    setTimeout(()=>{
      return rndError()? resolve(apps) : reject(new Error('Oops! Something went wrong'));
    }, 500)
    
  });

  /* ---- MOCK DATA END ----*/

  /* ---- API CALL ----*/

  // const res = await axios.get(`http://www.mocky.io/v2/5dbc1e71310000f5df4c0e8e`);
  // return res.data;

  /* ---- API CALL END ---- */
}


/* ------ FETCH SINGLE APP ------ */

export const fetchAppBySlug = async slug => {
  console.log('APP BY SLUG FETCH')
  const apps = await fetchApps(); //api call
  const app = find(propEq('slug', slug), apps); //mock sort

  return app;
}


/* ------ FETCH CATEGORIES DATA ------ */

export const fetchCats = async () => {
  console.log('start cats');

  /* ---- MOCK DATA ---- */

  return new Promise(resolve => {

    return resolve(cats);

  });

  /* ---- MOCK DATA END ----*/

  /* ---- API CALL ---- */
  
  // const res = await axios.get(`http://www.mocky.io/v2/5dbcaa6e330000580016a0b0`);
  // return res.data;

  /* ---- API CALL END ---- */
}


/* ------ FETCH APPS BY CAT ID  ------ */

export const fetchCatById = async (slug) => {
  console.log('APPS BY CAT ID FETCH');

  const apps = await fetchApps(); // api call
  const app = filter(e => includes(toLower(slug), toLower(prop('categoryId', e))), apps); //mock sort

  return app;
}

/* ------ FETCH POPALR APPS  ------ */

export const fetchPopular = async () => {
  console.log('POPULAR FETCH')

  const apps = await fetchApps(); // api call
  const app = apps.slice(0, 4); //mock sort

  return app;

}

/* ------ FETCH APPS BY SEARCH  ------ */

export const fetchSearch = async (query) => {

  const apps = await fetchApps(); //api call
  const app = filter(e => includes(toLower(query), toLower(prop('name', e))), apps); //mock sort

  return app;
};

