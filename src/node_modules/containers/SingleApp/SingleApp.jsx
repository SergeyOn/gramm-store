import React, { useEffect } from "react";
import { Link } from "react-router-dom";
import { connect } from "react-redux";
import { useLastLocation } from "react-router-last-location";
import { fetchAppBySlug, appPageOut } from "actions";
import { getAppById } from "selectors";
import ErrorBoundary from 'components/ErrorBoundary';
import Spinner from 'components/Spinner';
import ErrorIndicator from 'components/ErrorIndicator';

import { animated, useSpring, config } from 'react-spring';

import Popular from "components/Popular";

const SingleApp = props => {
  const {
    match: {
      params: { slug }
    },
    location,
    fetchAppBySlug,
    appPageOut,
    error,
    loading,
    app
  } = props;

  const spring1 = useSpring({
    opacity: app? '1' : '0',
    transform: app? 'scale(1)' : 'scale(0)',
    config: config.stiff
  });

  const spring2 = useSpring({
    opacity: app? '1' : '0',
    transform: app? 'translate3d(0, 0, 0)' : 'translate3d(0, 80px, 0)',
    config: config.gentle
  });

  /* ---- pass location data for chain back button ----   */

  const lastLocation = useLastLocation();

  const prevlocationData = {
    path: lastLocation ? `${lastLocation.pathname}` : "/",
    name: lastLocation
      ? `${lastLocation.pathname
          .split("/")
          .pop()
          .split("-")
          .join(" ") || "main"}`
      : "main"
  };

  const thisLocationData = {
    path: location.pathname,
    name: location.pathname
      .split("/")
      .pop()
      .split("-")
      .join(" ")
  };

  const locationData = location.state
    ? [...location.state.locationData, thisLocationData]
    : [prevlocationData, thisLocationData];

/* ---- //pass location data for chain back button// ----   */

  useEffect(() => {
    fetchAppBySlug(slug);
    return () => {
      appPageOut();
    };
  }, [slug, fetchAppBySlug, appPageOut]);

  return (
    <ErrorBoundary>
      <main className="main">
        <section className="single__app">
        <div className="container">
          <Link
            to={{
              pathname: locationData.slice(-2)[0].path,
              state: { locationData: locationData.slice(0, -2) }
            }}
            className="link-back"
          >
            back to {locationData.slice(-2)[0].name}
          </Link>
          {loading? <Spinner /> : error? <ErrorIndicator error={error} /> : app && (
            <div className="single__app__item" key={app.slug}>
              <animated.div style={spring2} className="single__app__title">
                <h1>{app.name}</h1>
              </animated.div>
              <div className="single__app__img">
                <animated.div style={spring1} className="single__app__img__wrap">
                  <img src={app.image} alt={app.name} />
                </animated.div>
              </div>
              <animated.div style={spring2} className="single__app__info">
                <p>{app.description}</p>
                <div className="a-link">
                  <a href={app.link} target="_blank" rel="noopener noreferrer">
                    <svg className="svg-icon">
                      <use xlinkHref="/uploads/sprite.svg#icon-tg" />
                    </svg>
                    Open bot in Telegram
                  </a>
                </div>
              </animated.div>
            </div>
          )}
          
        </div>
      </section>
        <Popular page={"popularPage"} locationData={locationData} />
      </main>
    </ErrorBoundary>
  );
};


const mapStateToProps = (state, {page}) => ({
  app: getAppById(state, state[page].id),
  loading: state[page].loading,
  error: state[page].error,
});

const mapDispatchToProps = {
  fetchAppBySlug,
  appPageOut
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(SingleApp);
