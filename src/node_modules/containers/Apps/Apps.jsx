import React, { useEffect } from 'react';
import { connect } from 'react-redux';

import { fetchApps, fetchCatById, updateActiveCatId, clearIds } from 'actions';
import { getApps, getActiveCatId } from 'selectors';
import AppList from 'components/AppList';
import Search from 'components/Search';
import Spinner from 'components/Spinner';
import ErrorIndicator from 'components/ErrorIndicator';
import ErrorBoundary from 'components/ErrorBoundary';

const Apps = props => {
  const { fetchApps, apps, type, fetchCatById, activeCategoryId, updateActiveCatId, error, loading, clearIds} = props;
 
  useEffect(() => {
    if (type === 'main') fetchApps();
    if (type === 'categorie' && activeCategoryId) {fetchCatById(activeCategoryId)};
    updateActiveCatId(activeCategoryId);
    return () => {
      clearIds();
    };
  }, [fetchApps, type, activeCategoryId, updateActiveCatId, fetchCatById, clearIds]);

  return (
    <ErrorBoundary>
      <main className="main">
        <Search />
        {loading? <Spinner /> : error? <ErrorIndicator error={error} /> : <AppList apps={apps} />}
      </main>
    </ErrorBoundary>
  )
}

const mapStateToProps = (state, {type, page, match}) => ({
 apps: getApps(state, state[page].ids),
 type,
 activeCategoryId: getActiveCatId(state, match),
 error: state[page].error,
 loading: state[page].loading,
});


const mapDispatchToProps = {
  fetchApps,
  fetchCatById,
  updateActiveCatId,
  clearIds
};

export default connect(mapStateToProps, mapDispatchToProps)(Apps);
